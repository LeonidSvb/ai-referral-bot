import logging
import sqlite3
import asyncio
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
import json
import os
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8406140567:AAFyqnlv0lhTcGqHRGg2Q_IaITamShEX_40"
ADMIN_ID = 6978852648  # –í–∞—à Telegram ID
GOOGLE_SHEETS_URL = "1fBx6nVx1yd0KiW24j-BCqcVm5rcaydzqiV4DJ0IRGq4"  # ID Google —Ç–∞–±–ª–∏—Ü—ã
REFERRAL_LEVEL_1 = 0.10  # 10% –∑–∞ –ø–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
REFERRAL_LEVEL_2 = 0.05  # 5% –∑–∞ –≤—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å
MIN_WITHDRAWAL = 1000    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞

def log_to_console(event_type, user_id, username, amount=0, referrer_id=None, level=0, commission=0):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_message = f"[{timestamp}] {event_type}: User {username} ({user_id})"
    
    if amount:
        log_message += f", Amount: {amount}"
    if referrer_id:
        log_message += f", Referrer: {referrer_id}"
    if level:
        log_message += f", Level: {level}"
    if commission:
        log_message += f", Commission: {commission}"
    
    logger.info(log_message)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('referral_bot.db')
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            referral_code TEXT UNIQUE,
            referrer_id INTEGER,
            referrer_level INTEGER DEFAULT 0,
            balance REAL DEFAULT 0,
            total_earned REAL DEFAULT 0,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (referrer_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS orders (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount REAL,
            status TEXT DEFAULT 'pending',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            processed_at DATETIME,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS referral_earnings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            referrer_id INTEGER,
            referee_id INTEGER,
            order_id INTEGER,
            level INTEGER,
            amount REAL,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (referrer_id) REFERENCES users (user_id),
            FOREIGN KEY (referee_id) REFERENCES users (user_id),
            FOREIGN KEY (order_id) REFERENCES orders (id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–ø–ª–∞—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS withdrawals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            amount REAL,
            payment_method TEXT,
            payment_details TEXT,
            status TEXT DEFAULT 'pending',
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
            processed_at DATETIME,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user(user_id):
    conn = sqlite3.connect('referral_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    return user

def create_user(user_id, username, first_name, referrer_id=None):
    conn = sqlite3.connect('referral_bot.db')
    cursor = conn.cursor()
    
    referral_code = str(uuid.uuid4())[:8]
    referrer_level = 0
    
    if referrer_id:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        referrer = get_user(referrer_id)
        if referrer:
            referrer_level = referrer[5] + 1  # referrer_level + 1
    
    cursor.execute('''
        INSERT INTO users (user_id, username, first_name, referral_code, referrer_id, referrer_level)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, referral_code, referrer_id, referrer_level))
    
    conn.commit()
    conn.close()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    log_to_console('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', user_id, username, referrer_id=referrer_id)
    
    return referral_code

def get_user_by_referral_code(referral_code):
    conn = sqlite3.connect('referral_bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_id FROM users WHERE referral_code = ?', (referral_code,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else None

def get_referral_stats(user_id):
    conn = sqlite3.connect('referral_bot.db')
    cursor = conn.cursor()
    
    # –†–µ—Ñ–µ—Ä–∞–ª—ã –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
    cursor.execute('SELECT COUNT(*) FROM users WHERE referrer_id = ?', (user_id,))
    level1_count = cursor.fetchone()[0]
    
    # –†–µ—Ñ–µ—Ä–∞–ª—ã –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
    cursor.execute('''
        SELECT COUNT(*) FROM users u1 
        JOIN users u2 ON u1.user_id = u2.referrer_id 
        WHERE u2.referrer_id = ?
    ''', (user_id,))
    level2_count = cursor.fetchone()[0]
    
    # –û–±—â–∏–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏
    cursor.execute('SELECT SUM(amount) FROM referral_earnings WHERE referrer_id = ?', (user_id,))
    total_earned = cursor.fetchone()[0] or 0
    
    # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
    cursor.execute('SELECT balance FROM users WHERE user_id = ?', (user_id,))
    balance = cursor.fetchone()[0] or 0
    
    conn.close()
    return level1_count, level2_count, total_earned, balance

def add_order(user_id, amount):
    conn = sqlite3.connect('referral_bot.db')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO orders (user_id, amount) VALUES (?, ?)', (user_id, amount))
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
    user = get_user(user_id)
    username = user[2] if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    log_to_console('–ó–∞–∫–∞–∑', user_id, username, amount=amount)
    
    return order_id

def process_referral_earnings(order_id, user_id, amount):
    conn = sqlite3.connect('referral_bot.db')
    cursor = conn.cursor()
    
    user = get_user(user_id)
    if not user or not user[4]:  # –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        conn.close()
        return
    
    referrer_id = user[4]  # referrer_id
    level = 1
    
    while referrer_id and level <= 2:
        referrer = get_user(referrer_id)
        if not referrer:
            break
            
        # –†–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏
        if level == 1:
            commission = amount * REFERRAL_LEVEL_1
        else:
            commission = amount * REFERRAL_LEVEL_2
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ä–∞–±–æ—Ç–æ–∫
        cursor.execute('''
            INSERT INTO referral_earnings (referrer_id, referee_id, order_id, level, amount)
            VALUES (?, ?, ?, ?, ?)
        ''', (referrer_id, user_id, order_id, level, commission))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        cursor.execute('''
            UPDATE users SET balance = balance + ?, total_earned = total_earned + ?
            WHERE user_id = ?
        ''', (commission, commission, referrer_id))
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
        referrer_user = get_user(referrer_id)
        referrer_username = referrer_user[2] if referrer_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        log_to_console('–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ', referrer_id, referrer_username, 
                      amount=amount, level=level, commission=commission)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        referrer_id = referrer[4]  # referrer_id —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        level += 1
    
    conn.commit()
    conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    first_name = update.effective_user.first_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    referrer_id = None
    if context.args:
        referral_code = context.args[0]
        referrer_id = get_user_by_referral_code(referral_code)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(user_id)
    if not user:
        referral_code = create_user(user_id, username, first_name, referrer_id)
        welcome_text = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –ò–ò!

üéØ **–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:**
–ü–µ—Ä–µ–¥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞

üí∞ **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:**
‚Ä¢ 1-–π —É—Ä–æ–≤–µ–Ω—å: 10% –æ—Ç –∑–∞–∫–∞–∑–∞
‚Ä¢ 2-–π —É—Ä–æ–≤–µ–Ω—å: 5% –æ—Ç –∑–∞–∫–∞–∑–∞

üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
`https://t.me/AILeoreferralbot?start={referral_code}`

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —Å –∫–∞–∂–¥–æ–≥–æ –∏—Ö –∑–∞–∫–∞–∑–∞!
        """
        
        if referrer_id:
            welcome_text += f"\n‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
    else:
        welcome_text = f"""
üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!

üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
`https://t.me/AILeoreferralbot?start={user[3]}`
        """
    
    keyboard = [
        [KeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å")],
        [KeyboardButton("üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞"), KeyboardButton("üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")],
        [KeyboardButton("üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton("‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    level1, level2, total_earned, balance = get_referral_stats(user_id)
    
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

üë• –†–µ—Ñ–µ—Ä–∞–ª—ã 1-–≥–æ —É—Ä–æ–≤–Ω—è: {level1}
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã 2-–≥–æ —É—Ä–æ–≤–Ω—è: {level2}
üí∞ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {total_earned:.2f} ‚ÇΩ
üí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.2f} ‚ÇΩ

üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚ÇΩ
    """
    
    await update.message.reply_text(stats_text, parse_mode='Markdown')

async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    
    if user:
        balance_text = f"""
üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å: {user[6]:.2f} ‚ÇΩ**

üìà –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user[7]:.2f} ‚ÇΩ
üí≥ –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –≤—ã–≤–æ–¥–∞: {user[6]:.2f} ‚ÇΩ

üí° –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: {MIN_WITHDRAWAL} ‚ÇΩ
        """
        
        if user[6] >= MIN_WITHDRAWAL:
            keyboard = [[InlineKeyboardButton("üí≥ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞", callback_data="withdraw")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(balance_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(balance_text, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

async def referral_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user = get_user(user_id)
    
    if user:
        link_text = f"""
üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**

`https://t.me/AILeoreferralbot?start={user[3]}`

üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏!

üí∞ **–í–∞—à–∏ –Ω–∞–≥—Ä–∞–¥—ã:**
‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 1-–≥–æ —É—Ä–æ–≤–Ω—è: 10%
‚Ä¢ –ó–∞ –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è: 5%

üéØ –ß–µ–º –±–æ–ª—å—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ - —Ç–µ–º –±–æ–ª—å—à–µ –∑–∞—Ä–∞–±–æ—Ç–æ–∫!
        """
        await update.message.reply_text(link_text, parse_mode='Markdown')
    else:
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    support_text = """
üìû **–ü–æ–¥–¥–µ—Ä–∂–∫–∞**

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:
‚Ä¢ Telegram: @support (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à username)
‚Ä¢ Email: support@example.com

‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00 - 18:00 (–ú–°–ö)
üïê –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 2-4 —á–∞—Å–∞
    """
    await update.message.reply_text(support_text, parse_mode='Markdown')

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    about_text = """
‚ÑπÔ∏è **–û —Å–µ—Ä–≤–∏—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å –ò–ò**

ü§ñ –ú—ã —Å–æ–∑–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

üéØ **–ù–∞—à–∏ —É—Å–ª—É–≥–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ò–ò –≤ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã
‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç-–±–æ—Ç–æ–≤
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ

üí° **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:**
‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ 80%
‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∞
‚Ä¢ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥

üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ —Ä–µ–≤–æ–ª—é—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏!
    """
    await update.message.reply_text(about_text, parse_mode='Markdown')

async def handle_withdrawal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    user = get_user(user_id)
    
    if user and user[6] >= MIN_WITHDRAWAL:
        withdrawal_text = f"""
üí≥ **–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤**

–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É: {user[6]:.2f} ‚ÇΩ

üìù –î–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
`–í–´–í–û–î [—Å—É–º–º–∞] [—Å–ø–æ—Å–æ–±] [—Ä–µ–∫–≤–∏–∑–∏—Ç—ã]`

**–ü—Ä–∏–º–µ—Ä:**
`–í–´–í–û–î 5000 –∫–∞—Ä—Ç–∞ 1234567890123456`

**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã:**
‚Ä¢ –∫–∞—Ä—Ç–∞ - –±–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
‚Ä¢ —è–Ω–¥–µ–∫—Å - –Ø–Ω–¥–µ–∫—Å–î–µ–Ω—å–≥–∏
‚Ä¢ qiwi - QIWI –∫–æ—à–µ–ª–µ–∫
        """
        await query.edit_message_text(withdrawal_text, parse_mode='Markdown')
    else:
        await query.edit_message_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞.")

async def handle_withdrawal_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.upper()
    
    if message_text.startswith('–í–´–í–û–î'):
        parts = message_text.split()
        if len(parts) >= 4:
            try:
                amount = float(parts[1])
                payment_method = parts[2]
                payment_details = ' '.join(parts[3:])
                
                user_id = update.effective_user.id
                user = get_user(user_id)
                
                if user and user[6] >= amount >= MIN_WITHDRAWAL:
                    conn = sqlite3.connect('referral_bot.db')
                    cursor = conn.cursor()
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
                    cursor.execute('''
                        INSERT INTO withdrawals (user_id, amount, payment_method, payment_details)
                        VALUES (?, ?, ?, ?)
                    ''', (user_id, amount, payment_method, payment_details))
                    
                    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –±–∞–ª–∞–Ω—Å–∞
                    cursor.execute('UPDATE users SET balance = balance - ? WHERE user_id = ?', (amount, user_id))
                    
                    conn.commit()
                    conn.close()
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å
                    log_to_console('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥', user_id, update.effective_user.first_name, 
                                  amount=amount)
                    
                    success_text = f"""
‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–∏–Ω—è—Ç–∞!**

üí∞ –°—É–º–º–∞: {amount:.2f} ‚ÇΩ
üí≥ –°–ø–æ—Å–æ–±: {payment_method}
üìÑ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {payment_details}

‚è∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º–µ—Ç 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.
                    """
                    await update.message.reply_text(success_text, parse_mode='Markdown')
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
                    if ADMIN_ID:
                        admin_text = f"""
üîî **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.first_name} (@{update.effective_user.username})
üí∞ –°—É–º–º–∞: {amount:.2f} ‚ÇΩ
üí≥ –°–ø–æ—Å–æ–±: {payment_method}
üìÑ –†–µ–∫–≤–∏–∑–∏—Ç—ã: {payment_details}
                        """
                        try:
                            await context.bot.send_message(ADMIN_ID, admin_text, parse_mode='Markdown')
                        except:
                            pass
                else:
                    await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –í–´–í–û–î [—Å—É–º–º–∞] [—Å–ø–æ—Å–æ–±] [—Ä–µ–∫–≤–∏–∑–∏—Ç—ã]")

# –ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
async def admin_add_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /add_order USER_ID AMOUNT"""
    if update.effective_user.id != ADMIN_ID:
        return
    
    if len(context.args) != 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_order USER_ID AMOUNT")
        return
    
    try:
        user_id = int(context.args[0])
        amount = float(context.args[1])
        
        user = get_user(user_id)
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        order_id = add_order(user_id, amount)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
        process_referral_earnings(order_id, user_id, amount)
        
        success_text = f"""
‚úÖ **–ó–∞–∫–∞–∑ –¥–æ–±–∞–≤–ª–µ–Ω!**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user[2]} (ID: {user_id})
üí∞ –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {amount:.2f} ‚ÇΩ
üìã ID –∑–∞–∫–∞–∑–∞: {order_id}

–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
        
        await update.message.reply_text(success_text, parse_mode='Markdown')
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –¥–ª—è ID –∏ —Å—É–º–º—ã.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return
    
    conn = sqlite3.connect('referral_bot.db')
    cursor = conn.cursor()
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cursor.execute('SELECT COUNT(*) FROM users')
    total_users = cursor.fetchone()[0]
    
    cursor.execute('SELECT COUNT(*) FROM orders WHERE status = "completed"')
    completed_orders = cursor.fetchone()[0]
    
    cursor.execute('SELECT SUM(amount) FROM orders WHERE status = "completed"')
    total_revenue = cursor.fetchone()[0] or 0
    
    cursor.execute('SELECT SUM(amount) FROM referral_earnings')
    total_referral_paid = cursor.fetchone()[0] or 0
    
    cursor.execute('SELECT COUNT(*) FROM withdrawals WHERE status = "pending"')
    pending_withdrawals = cursor.fetchone()[0]
    
    conn.close()
    
    admin_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {completed_orders}
üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:.2f} ‚ÇΩ
üí∏ –í—ã–ø–ª–∞—á–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º: {total_referral_paid:.2f} ‚ÇΩ
‚è≥ –û–∂–∏–¥–∞—é—Ç –≤—ã–≤–æ–¥–∞: {pending_withdrawals}

**–ö–æ–º–∞–Ω–¥—ã:**
/add_order USER_ID AMOUNT - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑
/admin_orders - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏
/admin_withdrawals - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–ª–∞—Ç–∞–º–∏
    """
    
    await update.message.reply_text(admin_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await stats(update, context)
    elif text == "üí∞ –ë–∞–ª–∞–Ω—Å":
        await balance(update, context)
    elif text == "üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞":
        await referral_link(update, context)
    elif text == "üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤":
        await balance(update, context)
    elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await support(update, context)
    elif text == "‚ÑπÔ∏è –û —Å–µ—Ä–≤–∏—Å–µ":
        await about(update, context)
    elif text.upper().startswith('–í–´–í–û–î'):
        await handle_withdrawal_request(update, context)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("balance", balance))
    application.add_handler(CommandHandler("admin_stats", admin_stats))
    application.add_handler(CommandHandler("add_order", admin_add_order))
    application.add_handler(CallbackQueryHandler(handle_withdrawal, pattern="withdraw"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
